专门用于告诉程
序执行特定运算或逻辑操作的符号。根据运算符的作用，可以将 C 语言中常见的运算符分为六大类

运算符类型	作用
算术运算符	用于处理四则运算
赋值运算符	用于将表达式的值赋给变量
比较运算符	用于表达式的比较，并返回一个真值或假值
逻辑运算符	用于根据表达式的值返回真值或假值
位运算符	用于处理数据的位运算
sizeof 运算符	用于求字节数长度

运算符是用来操作
数据的，因此，这些数据也被称为操作数，使用运算符将操作数连接而成的式子称为表达式。表达式具有
如下特点：
1、 常量和变量都是表达式，例如，常量 3.14、变量 i。
2、 运算符的类型对应表达式的类型，例如，算术运算符对应算术表达式。
3、每一个表达式都有自己的值，即表达式都有运算结果。

------------------------------------

C 语言中的算术运算符就是用来处理四则运算的符号，
这是最简单、最常用的运算符号

运算符	运算			范例		结果
+	正号			+3		3
-	负号			b=4;-b;		-4
+	加			5+5		10
-	减			6-4		2
*	乘			3*4		12
/	除			5/5		1
%	取模(即算术中的求余数)	7%5		2
++	自增（前）		a=2;b=++a;	a=3;b=3;
++	自增（后		a=2;b=a++;	a=3;b=2;
--	自减（前）		a=2;b=--a;	a=1;b=1;
--	自减（后）		a=2;b=a--;	a=1;b=2;

算术运算符看上去都比较简单，也很容易理解，但在实际使用时还有很多需要注意的问题，接下来就
针对其中比较重要的几点进行详细地讲解，具体如下：
1、进行四则混合运算时，运算顺序遵循数学中“先乘除后加减”的原则。
2、在进行自增（ ++）和自减（ --）的运算时，如果运算符（ ++或--）放在操作数的前面则是先进行自
增或自减运算，再进行其他运算。反之，如果运算符放在操作数的后面则是先进行其他运算再进行自增或
自减运算。

----------------------------------------------

赋值运算符的作用就是将常量、变量或表达式的值赋给某一个变量

运算符		运算		范例		结果
=		赋值		a=3;b=2;	a=3;b=2;
+=		加等于		a=3;b=2;a+=b;	a=5;b=2;
-=		减等于		a=3;b=2;a-=b;	a=1;b=2;
*=		乘等于		a=3;b=2;a*=b;	a=6;b=2;
/=		除等于		a=3;b=2;a/=b;	a=1;b=2;
%=		模等于		a=3;b=2;a%=b;	a=1;b=2;

---------------------------------------------

compare operator

比较运算符用于对两个数值或变量进行比较，其结果是一个逻辑值, “真”用数字“1”来表示， “假”用数字“0”来表示

运算符		运算		范例	结果
==		相等于		4 == 3	0
!=		不等于		4 != 3	1
<		小于		4 < 3	0
>		大于		4 > 3	1
<=		小于等于	4 <= 3	0
>=		大于等于	4 >= 3	1

---------------------------------------------

logical operator

运算符		运算	范例	结果
!		非	!a	如果 a 为假，则!a 为真；
				如果 a 为真，则!a 为假
&&		与	a&&b	如果 a 和 b 都为真，则结果为真否则为假
||		或	a|| b	如果 a 和 b 有一个或以上为真，则结果为真，二者都为假时，结果为假

----------------------------------------------

bitwise operator

运算符	运算		范例		结果
&	按位与		0 & 0		0
			0 & 1		0
			1 & 1		1
			1 & 0		0

|	按位或		0 | 0		0
			0 | 1		1
			1 | 1		1
			1 | 0		1

~	取反		~0		1
			~1		0

^	按位异或	0 ^ 0		0
			0 ^ 1		1
			1 ^ 1		0
			1 ^ 0		1

<<	左移		00000010<<2	00001000
			10010011<<2	01001100

>>	右移		01100010>>2	00011000
			11100010>>2	11111000

位运算符“ <<” 就是将操作数所有二进制位向左移动一位。运算时，右边的空位补 0。左边移走的部分舍去

位运算符“ >>” 就是将操作数所有二进制位向右移动一位。运算时，左边的空位根据原数的符号位补 0 或者 1（原来是负数就补 1，是正数就补 0）。

----------------------------------------

sizeof operator

#include <stdio.h>
void main()
{
	//通过类型名称计算各基本数据类型所占内存大小
	printf("char: %d\n", sizeof(char));
	printf("short: %d\n", sizeof(short));
	printf("long: %d\n", sizeof(long));
	printf("float: %d\n", sizeof(float));
	printf("double: %d\n", sizeof(double));
	printf("unsigned char: %d\n", sizeof(unsigned char));
	printf("unsigned short: %d\n", sizeof(unsigned short));
	printf("unsigned int: %d\n", sizeof(unsigned int));
	printf("unsigned long: %d\n", sizeof(unsigned long));

	//通过变量名称计算变量所属数据类型占用内存大小
	int val_int = 100;
	double val_double = 100000.0;
	printf("val_int: %d\n", sizeof(val_int));
	printf("val_double: %d\n", sizeof(val_double));
}

=====================================================
