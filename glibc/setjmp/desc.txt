
在该头文件中定义了一种特别的函数调用和函数返回顺序的方式。这种方式不同于以往的函数调用和返回顺序， 
它允许程序流程立即从一个深层嵌套的函数中返回。
<setjmp.h> 中定义了两个宏：

int setjmp(jmp_buf env); /*设置调转点*/ 
longjmp(jmp_buf jmpb, int retval); /*跳转*/ 

宏setjmp的功能是将当前程序的状态保存在结构env ，为调用宏longjmp设置一个跳转点。setjmp将当前信息保存在env中供longjmp使用。其中env是jmp_buf结构类型的。 
Demo :

#include  <stdio.h>
#include  <setjmp.h>
static jmp_buf buf;
void second(void) {
    printf("second\n");        
	// 打印
    longjmp(buf,1);            
	// 跳回setjmp的调用处
	- 使得setjmp返回值为1
}
 void first(void) {
    second();
    printf("first\n");          
	// 不可能执行到此行
}
 int main() {   
    if ( ! setjmp(buf) ) {
        first();               
	// 进入此行前，setjmp返回0
    } else {                  
	// 当longjmp跳转回，
	setjmp返回1，因此进入此行
        printf("main\n");  
		// 打印
    }
     return 0;
}
直接调用setjmp时，返回值为0，这一般用于初始化（设置跳转点时）。以后再调用longjmp宏时用env变量进行跳转。程序会自动跳转到setjmp宏的返回语句处，此时setjmp的返回值为非0，由longjmp的第二个参数指定。 
一般地，宏setjmp和longjmp是成对使用的，这样程序流程可以从一个深层嵌套的函数中返回

