国家、文化和语言规则集称为区域设置，<locale.h> 头文件中定义了区域设置相关的函数。setlocale函数用于设置或返回当前的区域特性，localeconv用于返回当前区域中的数字和货币信息（保存在struct lconv结构实例中）。setlocale的第一个实参指定要改变的区域行为类别，预定义的setlocale类别有：
LC_ALL
全部本地化信息
LC_COLLATE
影响strcoll和strxfrm
LC_CTYPE
影响字符处理函数和多行字符处理函数
LC_MONETARY
影响localeconv返回的货币格式化信息
LC_NUMERIC
影响格式化输入输出字符中的小数点符号
LC_TIME
影响strftime函数
<locale.h> 头文件中提供了2个函数 
setlocale() 设置或恢复本地化信息 
localeconv() 返回当前地域设置的信息
setlocale(constant,location) 用法 
如果这个函数成功执行，将返回当前的场景属性；如果执行失败，将返回False。
constant 参数 (必要参数。指定设置的场景信息)
LC_ALL – 所有下属的常量
LC_COLLATE – 排列顺序
LC_CTYPE – 字符分类和转换（例如：将所有的字符转换成小写或大写形式）
LC_MESSAGES – 系统信息格式
LC_MONETARY – 货币 / 通货格式
LC_NUMERIC – 数值格式
LC_TIME – 日期和时间格式
location (必要参数)
必要参数。指定需要进行场景信息设置的国家或区域。它可以由一个字符串或一个数组组成。如果本地区域是一个数组，那么setlocale()函数将尝试每 个数组元素直到它从中获取有效的语言和区域代码信息为止。如果一个区域处于不同操作系统中的不同名称下，那么这个参数将非常有用。
struct lconv *localeconv(void); 用法
localeconv 返回lconv结构指针 lconv结构介绍: 保存格式化的数值信息，保存数值包括货币和非货币的格式化信息，localeconv返回指向该对象的指针，以下为结构中的成员及信息：
char *decimal_point; 数字的小数点号
char *thousands_sep; 数字的千分组分隔符
每个元素为相应组中的数字位数，索引越高的元素越靠左边。一个值为CHAR_MAX的元素表示没有更多的分组了。一个值为0的元素表示前面的元素能用在靠左边的所有分组中
char *grouping; 数字分组分隔符
char *int_curr_symbol; 前面的三个字符ISO 4217中规定的货币符号，第四个字符是分隔符，第五个字符是'\0' */
char *currency_symbol; 本地货币符号
char *mon_decimal_point; 货币的小数点号
char *mon_thousands_sep; 千分组分隔符
char *mon_grouping; 类似于grouping元素
char *positive_sign; 正币值的符号
char *negative_sign; 负币值的符号
char int_frac_digits; 国际币值的小数部分
char frac_digits; 本地币值的小数部分
char p_cs_precedes; 如果currency_symbol放在正币值之前则为1，否则为0
char p_sep_by_space; 当且仅当currency_symbol与正币值之间用空格分开时为1
char n_cs_precedes; < 如果currency_symbol放在负币值之前则为1，否则为0/dt>
char n_sep_by_space; 当且仅当currency_symbol与负币值之间用空格分开时为1
char p_sign_posn; 格式化选项
0 - 在数量和货币符号周围的圆括号 
1 - 数量和货币符号之前的 + 号 
2 - 数量和货币符号之后的 + 号 
3 - 货币符号之前的 + 号 
4 - 货币符号之后的 + 号
char n_sign_posn 格式化选项
0 - 在数量和货币符号周围的圆括号 
1 - 数量和货币符号之前的 - 号 
2 - 数量和货币符号之后的 - 号 
3 - 货币符号之前的 - 号 
4 - 货币符号之后的 - 号
最后提示：可以使用setlocale(LC_ALL,NULL)函数将场景信息设置为系统默认值。

SETLOCALE(3)							     Linux Programmer's Manual							       SETLOCALE(3)



NAME
       setlocale - set the current locale

SYNOPSIS
       #include <locale.h>

       char *setlocale(int category, const char *locale);

DESCRIPTION
       The setlocale() function is used to set or query the program's current locale.

       If  locale  is not NULL, the program's current locale is modified according to the arguments.  The argument category determines which parts of the program's
       current locale should be modified.

       LC_ALL for all of the locale.

       LC_COLLATE
	      for regular expression matching (it determines the meaning of range expressions and equivalence classes) and string collation.

       LC_CTYPE
	      for regular expression matching, character classification, conversion, case-sensitive comparison, and wide character functions.

       LC_MESSAGES
	      for localizable natural-language messages.

       LC_MONETARY
	      for monetary formatting.

       LC_NUMERIC
	      for number formatting (such as the decimal point and the thousands separator).

       LC_TIME
	      for time and date formatting.

       The argument locale is a pointer to a character string containing the required setting of category.  Such a string is either a well-known constant like	"C"
       or "da_DK" (see below), or an opaque string that was returned by another call of setlocale().

       If  locale  is "", each part of the locale that should be modified is set according to the environment variables.  The details are implementation-dependent.
       For glibc, first (regardless of category), the environment variable LC_ALL is inspected, next the environment variable with the same name  as  the  category
       (LC_COLLATE, LC_CTYPE, LC_MESSAGES, LC_MONETARY, LC_NUMERIC, LC_TIME) and finally the environment variable LANG.  The first existing environment variable is
       used.  If its value is not a valid locale specification, the locale is unchanged, and setlocale() returns NULL.

       The locale "C" or "POSIX" is a portable locale; its LC_CTYPE part corresponds to the 7-bit ASCII character set.

       A locale name is typically of the form language[_territory][.codeset][@modifier], where language is an ISO 639 language code, territory is an ISO 3166 coun‐
       try  code,  and	codeset  is  a	character  set	or encoding identifier like ISO-8859-1 or UTF-8.  For a list of all supported locales, try "locale -a", cf.
       locale(1).

       If locale is NULL, the current locale is only queried, not modified.

       On startup of the main program, the portable "C" locale is selected as default.	A program may be made portable to all locales by calling:

	   setlocale(LC_ALL, "");

       after program initialization, by using the values returned from a localeconv(3) call for locale-dependent information, by using the multibyte and wide char‐
       acter functions for text processing if MB_CUR_MAX > 1, and by using strcoll(3), wcscoll(3) or strxfrm(3), wcsxfrm(3) to compare strings.

RETURN VALUE
       A  successful  call to setlocale() returns an opaque string that corresponds to the locale set.	This string may be allocated in static storage.  The string
       returned is such that a subsequent call with that string and its associated category will restore that part of the process's locale.  The  return  value  is
       NULL if the request cannot be honored.

CONFORMING TO
       C89, C99, POSIX.1-2001.

NOTES
       Linux  (that  is, glibc) supports the portable locales "C" and "POSIX".	In the good old days there used to be support for the European Latin-1 "ISO-8859-1"
       locale (e.g., in libc-4.5.21 and libc-4.6.27), and the Russian "KOI-8" (more precisely, "koi-8r") locale (e.g., in libc-4.6.27), so that having an  environ‐
       ment variable LC_CTYPE=ISO-8859-1 sufficed to make isprint(3) return the right answer.  These days non-English speaking Europeans have to work a bit harder,
       and must install actual locale files.

SEE ALSO
       locale(1), localedef(1), isalpha(3), localeconv(3), nl_langinfo(3), rpmatch(3), strcoll(3), strftime(3), charsets(7), locale(7)

COLOPHON
       This page is part of release 3.54 of the Linux man-pages project.  A description of the project, and information about  reporting  bugs,  can  be  found  at
       http://www.kernel.org/doc/man-pages/.



GNU									     2008-12-05 							       SETLOCALE(3)
